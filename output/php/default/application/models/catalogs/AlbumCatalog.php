<?php
/**
 * Bender
 *
 * Our Simple Models
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @author     <zetta> <chentepixtol>, $LastChangedBy$
 * @version    1.0.0 SVN: $Id$
 */

/**
 * Singleton AlbumCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.0 SVN: $Revision$
 */
class AlbumCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var AlbumCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return AlbumCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase AlbumCatalog
     * @return AlbumCatalog
     */
    protected function AlbumCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un Album a la base de datos
     * @param Album $album Objeto Album
     */
    public function create($album)
    {
        if(!($album instanceof Album))
            throw new AlbumException("passed parameter isn't a Album instance");
        try
        {
            $data = array(
                'id_user' => $album->getIdUser(),
                'title' => $album->getTitle(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(Album::TABLENAME, $data);
            $album->setIdAlbum($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new AlbumException("The Album can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idAlbum
     * @return Album|null
     */
    public function getById($idAlbum)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Album::ID_ALBUM, $idAlbum, Criteria::EQUAL);
            $newAlbum = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new AlbumException("Can't obtain the Album \n" . $e->getMessage());
        }
        return $newAlbum;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return AlbumCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new AlbumCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(Album::ID_ALBUM, $ids, Criteria::IN);
            $albumCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new AlbumException("AlbumCollection can't be populated\n" . $e->getMessage());
        }
        return $albumCollection;
    }

    /**
     * Metodo para actualizar un Album
     * @param Album $album 
     */
    public function update($album)
    {
        if(!($album instanceof Album))
            throw new AlbumException("passed parameter isn't a Album instance");
        try
        {
            $where[] = "id_album = '{$album->getIdAlbum()}'";
            $data = array(
                'id_user' => $album->getIdUser(),
                'title' => $album->getTitle(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(Album::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new AlbumException("The Album can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un album
     * @param Album $album
     */	
    public function save($album)
    {
        if(!($album instanceof Album))
            throw new AlbumException("passed parameter isn't a Album instance");
        if(null != $album->getIdAlbum())
            $this->update($album);
        else
            $this->create($album);
    }

    /**
     * Metodo para eliminar un album
     * @param Album $album
     */
    public function delete($album)
    {
        if(!($album instanceof Album))
            throw new AlbumException("passed parameter isn't a Album instance");
        $this->deleteById($album->getIdAlbum());
    }

    /**
     * Metodo para eliminar un Album a partir de su Id
     * @param int $idAlbum
     */
    public function deleteById($idAlbum)
    {
        try
        {
            $where = array($this->db->quoteInto('id_album = ?', $idAlbum));
            $this->db->delete(Album::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new AlbumException("The Album can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios Album a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Album::ID_ALBUM, $ids, Criteria::IN);
            $this->db->delete(Album::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new AlbumException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de Album por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de Album que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(Album::ID_ALBUM, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un Album dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @return array Array con el campo de los objetos Album que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try
        {
            $sql = "SELECT {$field}
                    FROM ".Album::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new AlbumException("No se pudieron obtener los ids de objetos Album\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos Album 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return AlbumCollection $albumCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".Album::TABLENAME."
                    WHERE " . $criteria->createSql();
            $albumCollection = new AlbumCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $albumCollection->append($this->getAlbumInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new AlbumException("Cant obtain AlbumCollection\n" . $e->getMessage());
        }
        return $albumCollection;
    }
    
    /**
     * Metodo que cuenta Album 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_album')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".Album::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new AlbumException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto Album y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return Album 
     */
    private function getAlbumInstance($result)
    {
        $newAlbum = new Album();
        $newAlbum->setIdAlbum($result['id_album']);
        $newAlbum->setIdUser($result['id_user']);
        $newAlbum->setTitle($result['title']);
        return $newAlbum;
    }
  
    /**
     * Obtiene un AlbumCollection  dependiendo del idUser
     * @param int $idUser  
     * @return AlbumCollection 
     */
    public function getByIdUser($idUser)
    {
        $criteria = new Criteria();
        $criteria->add(Album::ID_USER, $idUser, Criteria::EQUAL);
        $albumCollection = $this->getByCriteria($criteria);
        return $albumCollection;
    }

    /**
     * Link a Album to Photo
     * @param int $idAlbum
     * @param int $idPhoto
     */
    public function linkToPhoto($idAlbum, $idPhoto)
    {
        try
        {
            $this->unlinkFromPhoto($idAlbum, $idPhoto);
            $data = array(
                'id_album' => $idAlbum,
                'id_photo' => $idPhoto,
            );
            $this->db->insert(Album::TABLENAME_ALBUM_PHOTO, $data);
        }
        catch(Exception $e)
        {
            throw new AlbumException("Can't link Album to Photo\n" . $e->getMessage());
        }
    }

    /**
     * Unlink a Album from Photo
     * @param int $idAlbum
     * @param int $idPhoto
     */
    public function unlinkFromPhoto($idAlbum, $idPhoto)
    {
        try
        {
            $where = array(
                $this->db->quoteInto('id_album = ?', $idAlbum),
                $this->db->quoteInto('id_photo = ?', $idPhoto),
            );
            $this->db->delete(Album::TABLENAME_ALBUM_PHOTO, $where);
        }
        catch(Exception $e)
        {
            throw new AlbumException("Can't unlink Album to Photo\n" . $e->getMessage());
        }
    }

    /**
     * Unlink all Photo relations
     * @param int $idAlbum
     */
    public function unlinkAllPhotoRelations($idAlbum)
    {
        try
        {
            $where = array(
                $this->db->quoteInto('id_album = ?', $idAlbum),
            );
            $this->db->delete(Album::TABLENAME_ALBUM_PHOTO, $where);
        }
        catch(Exception $e)
        {
            throw new AlbumException("Can't unlink all Photo relations \n" . $e->getMessage());
        }
    }

    /**
     * Get Album - Photo relations by Criteria
     * @param Criteria $criteria
     * @return array
     */
    public function getAlbumPhotoRelations(Criteria $criteria = null)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try
        {
           $sql = "SELECT * FROM ". Album::TABLENAME_ALBUM_PHOTO ."
                   WHERE  " . $criteria->createSql();
           $result = $this->db->fetchAll($sql);
        } catch(Exception $e)
        {
           throw new AlbumException("Can't obtain relations by criteria\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Get AlbumCollection by Photo
     * @param int $idPhoto
     * @return AlbumCollection
     */
    public function getByPhoto($idPhoto)
    {
        $criteria = new Criteria();
        $criteria->add('id_photo', $idPhoto, Criteria::EQUAL);
        $albumPhoto = $this->getAlbumPhotoRelations($criteria);
        $ids = array();
        foreach($albumPhoto as $rs){
            $ids[] = $rs['id_album'];
        }
        return $this->getByIds($ids);
    }

} 
 
