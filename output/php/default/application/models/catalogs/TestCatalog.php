<?php
/**
 * Bender
 *
 * Our Simple Models
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @author     <zetta> <chentepixtol>, $LastChangedBy$
 * @version    1.0.0 SVN: $Id$
 */

/**
 * Singleton TestCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.0 SVN: $Revision$
 */
class TestCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var TestCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return TestCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase TestCatalog
     * @return TestCatalog
     */
    protected function TestCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un Test a la base de datos
     * @param Test $test Objeto Test
     */
    public function create($test)
    {
        if(!($test instanceof Test))
            throw new TestException("passed parameter isn't a Test instance");
        try
        {
            $data = array(
                'name' => $test->getName(),
                'number' => $test->getNumber(),
                'data' => $test->getData(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(Test::TABLENAME, $data);
        }
        catch(Exception $e)
        {
            throw new TestException("The Test can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param  $
     * @return Test|null
     */
    public function getById($)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Test::, $, Criteria::EQUAL);
            $newTest = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new TestException("Can't obtain the Test \n" . $e->getMessage());
        }
        return $newTest;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return TestCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new TestCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(Test::, $ids, Criteria::IN);
            $testCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new TestException("TestCollection can't be populated\n" . $e->getMessage());
        }
        return $testCollection;
    }

    /**
     * Metodo para actualizar un Test
     * @param Test $test 
     */
    public function update($test)
    {
        if(!($test instanceof Test))
            throw new TestException("passed parameter isn't a Test instance");
        try
        {
            $where[] = " = '{$test->()}'";
            $data = array(
                'name' => $test->getName(),
                'number' => $test->getNumber(),
                'data' => $test->getData(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(Test::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new TestException("The Test can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un test
     * @param Test $test
     */	
    public function save($test)
    {
        if(!($test instanceof Test))
            throw new TestException("passed parameter isn't a Test instance");
        if(null != $test->())
            $this->update($test);
        else
            $this->create($test);
    }

    /**
     * Metodo para eliminar un test
     * @param Test $test
     */
    public function delete($test)
    {
        if(!($test instanceof Test))
            throw new TestException("passed parameter isn't a Test instance");
        $this->deleteById($test->());
    }

    /**
     * Metodo para eliminar un Test a partir de su Id
     * @param int $
     */
    public function deleteById($)
    {
        try
        {
            $where = array($this->db->quoteInto(' = ?', $));
            $this->db->delete(Test::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new TestException("The Test can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios Test a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Test::, $ids, Criteria::IN);
            $this->db->delete(Test::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new TestException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de Test por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de Test que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(Test::, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un Test dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @return array Array con el campo de los objetos Test que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try
        {
            $sql = "SELECT {$field}
                    FROM ".Test::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new TestException("No se pudieron obtener los ids de objetos Test\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos Test 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return TestCollection $testCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".Test::TABLENAME."
                    WHERE " . $criteria->createSql();
            $testCollection = new TestCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $testCollection->append($this->getTestInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TestException("Cant obtain TestCollection\n" . $e->getMessage());
        }
        return $testCollection;
    }
    
    /**
     * Metodo que cuenta Test 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = '')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".Test::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TestException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto Test y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return Test 
     */
    private function getTestInstance($result)
    {
        $newTest = new Test();
        $newTest->setName($result['name']);
        $newTest->setNumber($result['number']);
        $newTest->setData($result['data']);
        return $newTest;
    }

} 
 
