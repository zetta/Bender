<?php
/**
 * Bender
 *
 * Our Simple Models
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @author     <zetta> <chentepixtol>, $LastChangedBy$
 * @version    1.0.0 SVN: $Id$
 */

/**
 * Singleton PhotoCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.0 SVN: $Revision$
 */
class PhotoCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var PhotoCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return PhotoCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase PhotoCatalog
     * @return PhotoCatalog
     */
    protected function PhotoCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un Photo a la base de datos
     * @param Photo $photo Objeto Photo
     */
    public function create($photo)
    {
        if(!($photo instanceof Photo))
            throw new PhotoException("passed parameter isn't a Photo instance");
        try
        {
            $data = array(
                'id_user' => $photo->getIdUser(),
                'title' => $photo->getTitle(),
                'uri' => $photo->getUri(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(Photo::TABLENAME, $data);
            $photo->setIdPhoto($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new PhotoException("The Photo can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idPhoto
     * @return Photo|null
     */
    public function getById($idPhoto)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Photo::ID_PHOTO, $idPhoto, Criteria::EQUAL);
            $newPhoto = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new PhotoException("Can't obtain the Photo \n" . $e->getMessage());
        }
        return $newPhoto;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return PhotoCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new PhotoCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(Photo::ID_PHOTO, $ids, Criteria::IN);
            $photoCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new PhotoException("PhotoCollection can't be populated\n" . $e->getMessage());
        }
        return $photoCollection;
    }

    /**
     * Metodo para actualizar un Photo
     * @param Photo $photo 
     */
    public function update($photo)
    {
        if(!($photo instanceof Photo))
            throw new PhotoException("passed parameter isn't a Photo instance");
        try
        {
            $where[] = "id_photo = '{$photo->getIdPhoto()}'";
            $data = array(
                'id_user' => $photo->getIdUser(),
                'title' => $photo->getTitle(),
                'uri' => $photo->getUri(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(Photo::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new PhotoException("The Photo can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un photo
     * @param Photo $photo
     */	
    public function save($photo)
    {
        if(!($photo instanceof Photo))
            throw new PhotoException("passed parameter isn't a Photo instance");
        if(null != $photo->getIdPhoto())
            $this->update($photo);
        else
            $this->create($photo);
    }

    /**
     * Metodo para eliminar un photo
     * @param Photo $photo
     */
    public function delete($photo)
    {
        if(!($photo instanceof Photo))
            throw new PhotoException("passed parameter isn't a Photo instance");
        $this->deleteById($photo->getIdPhoto());
    }

    /**
     * Metodo para eliminar un Photo a partir de su Id
     * @param int $idPhoto
     */
    public function deleteById($idPhoto)
    {
        try
        {
            $where = array($this->db->quoteInto('id_photo = ?', $idPhoto));
            $this->db->delete(Photo::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new PhotoException("The Photo can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios Photo a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Photo::ID_PHOTO, $ids, Criteria::IN);
            $this->db->delete(Photo::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new PhotoException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de Photo por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de Photo que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(Photo::ID_PHOTO, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un Photo dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @return array Array con el campo de los objetos Photo que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try
        {
            $sql = "SELECT {$field}
                    FROM ".Photo::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new PhotoException("No se pudieron obtener los ids de objetos Photo\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos Photo 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return PhotoCollection $photoCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".Photo::TABLENAME."
                    WHERE " . $criteria->createSql();
            $photoCollection = new PhotoCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $photoCollection->append($this->getPhotoInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new PhotoException("Cant obtain PhotoCollection\n" . $e->getMessage());
        }
        return $photoCollection;
    }
    
    /**
     * Metodo que cuenta Photo 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_photo')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".Photo::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new PhotoException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto Photo y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return Photo 
     */
    private function getPhotoInstance($result)
    {
        $newPhoto = new Photo();
        $newPhoto->setIdPhoto($result['id_photo']);
        $newPhoto->setIdUser($result['id_user']);
        $newPhoto->setTitle($result['title']);
        $newPhoto->setUri($result['uri']);
        return $newPhoto;
    }
  
    /**
     * Obtiene un PhotoCollection  dependiendo del idUser
     * @param int $idUser  
     * @return PhotoCollection 
     */
    public function getByIdUser($idUser)
    {
        $criteria = new Criteria();
        $criteria->add(Photo::ID_USER, $idUser, Criteria::EQUAL);
        $photoCollection = $this->getByCriteria($criteria);
        return $photoCollection;
    }

    /**
     * Link a Photo to Album
     * @param int $idPhoto
     * @param int $idAlbum
     */
    public function linkToAlbum($idPhoto, $idAlbum)
    {
        try
        {
            $this->unlinkFromAlbum($idPhoto, $idAlbum);
            $data = array(
                'id_photo' => $idPhoto,
                'id_album' => $idAlbum,
            );
            $this->db->insert(Photo::TABLENAME_PHOTO_ALBUM, $data);
        }
        catch(Exception $e)
        {
            throw new PhotoException("Can't link Photo to Album\n" . $e->getMessage());
        }
    }

    /**
     * Unlink a Photo from Album
     * @param int $idPhoto
     * @param int $idAlbum
     */
    public function unlinkFromAlbum($idPhoto, $idAlbum)
    {
        try
        {
            $where = array(
                $this->db->quoteInto('id_photo = ?', $idPhoto),
                $this->db->quoteInto('id_album = ?', $idAlbum),
            );
            $this->db->delete(Photo::TABLENAME_PHOTO_ALBUM, $where);
        }
        catch(Exception $e)
        {
            throw new PhotoException("Can't unlink Photo to Album\n" . $e->getMessage());
        }
    }

    /**
     * Unlink all Album relations
     * @param int $idPhoto
     */
    public function unlinkAllAlbumRelations($idPhoto)
    {
        try
        {
            $where = array(
                $this->db->quoteInto('id_photo = ?', $idPhoto),
            );
            $this->db->delete(Photo::TABLENAME_PHOTO_ALBUM, $where);
        }
        catch(Exception $e)
        {
            throw new PhotoException("Can't unlink all Album relations \n" . $e->getMessage());
        }
    }

    /**
     * Get Photo - Album relations by Criteria
     * @param Criteria $criteria
     * @return array
     */
    public function getPhotoAlbumRelations(Criteria $criteria = null)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try
        {
           $sql = "SELECT * FROM ". Photo::TABLENAME_PHOTO_ALBUM ."
                   WHERE  " . $criteria->createSql();
           $result = $this->db->fetchAll($sql);
        } catch(Exception $e)
        {
           throw new PhotoException("Can't obtain relations by criteria\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Get PhotoCollection by Album
     * @param int $idAlbum
     * @return PhotoCollection
     */
    public function getByAlbum($idAlbum)
    {
        $criteria = new Criteria();
        $criteria->add('id_album', $idAlbum, Criteria::EQUAL);
        $photoAlbum = $this->getPhotoAlbumRelations($criteria);
        $ids = array();
        foreach($photoAlbum as $rs){
            $ids[] = $rs['id_photo'];
        }
        return $this->getByIds($ids);
    }

} 
 
