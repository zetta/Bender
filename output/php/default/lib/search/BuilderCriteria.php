<?php 
/**
 * Bender
 *
 * Our Simple Models
 *
 * @category   lib
 * @package    lib_search
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @author     <zetta> <chentepixtol>
 * @version    1.0.0 SVN: $Id$
 */
 

/**
 * BuilderCriteria Class
 * @category   lib
 * @package    lib_seach
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     chentepixtol 
 * @version    1.0.0 SVN: $Revision$
 */
class BuilderCriteria
{

   /**
    * Build a Criteria
    * @param int $idPerson
    * @param string $firstName
    * @param string $lastName
    * @return Criteria
    */
    public static function person($idPerson = null, $firstName = null, $lastName = null)
    {
        $criteria = new Criteria();
        if( null != $idPerson)
            $criteria->add(Person::ID_PERSON, $idPerson, is_array($idPerson) ? Criteria::IN : Criteria::EQUAL);
        if( null != $firstName)
            $criteria->add(Person::FIRST_NAME, $firstName, Criteria::LIKE);
        if( null != $lastName)
            $criteria->add(Person::LAST_NAME, $lastName, Criteria::LIKE);
        return $criteria;
    } 
	
   /**
    * Build a Criteria from array
    * @param array $fields
    * @return Criteria
    */
    public static function personFromArray($fields)
    {
        $criteria = self::person($fields['id_person'], $fields['first_name'], $fields['last_name']);
        return $criteria;
    } 

   /**
    * Build a Criteria
    * @param int $idUser
    * @param int $idPerson
    * @param string $username
    * @param string $password
    * @return Criteria
    */
    public static function user($idUser = null, $idPerson = null, $username = null, $password = null)
    {
        $criteria = new Criteria();
        if( null != $idUser)
            $criteria->add(User::ID_USER, $idUser, is_array($idUser) ? Criteria::IN : Criteria::EQUAL);
        if( null != $idPerson)
            $criteria->add(User::ID_PERSON, $idPerson, is_array($idPerson) ? Criteria::IN : Criteria::EQUAL);
        if( null != $username)
            $criteria->add(User::USERNAME, $username, Criteria::LIKE);
        if( null != $password)
            $criteria->add(User::PASSWORD, $password, Criteria::LIKE);
        return $criteria;
    } 
	
   /**
    * Build a Criteria from array
    * @param array $fields
    * @return Criteria
    */
    public static function userFromArray($fields)
    {
        $criteria = self::user($fields['id_user'], $fields['id_person'], $fields['username'], $fields['password']);
        return $criteria;
    } 

   /**
    * Build a Criteria
    * @param int $idPhoto
    * @param int $idUser
    * @param string $title
    * @param string $uri
    * @return Criteria
    */
    public static function photo($idPhoto = null, $idUser = null, $title = null, $uri = null)
    {
        $criteria = new Criteria();
        if( null != $idPhoto)
            $criteria->add(Photo::ID_PHOTO, $idPhoto, is_array($idPhoto) ? Criteria::IN : Criteria::EQUAL);
        if( null != $idUser)
            $criteria->add(Photo::ID_USER, $idUser, is_array($idUser) ? Criteria::IN : Criteria::EQUAL);
        if( null != $title)
            $criteria->add(Photo::TITLE, $title, Criteria::LIKE);
        if( null != $uri)
            $criteria->add(Photo::URI, $uri, Criteria::LIKE);
        return $criteria;
    } 
	
   /**
    * Build a Criteria from array
    * @param array $fields
    * @return Criteria
    */
    public static function photoFromArray($fields)
    {
        $criteria = self::photo($fields['id_photo'], $fields['id_user'], $fields['title'], $fields['uri']);
        return $criteria;
    } 

   /**
    * Build a Criteria
    * @param int $idAlbum
    * @param int $idUser
    * @param string $title
    * @return Criteria
    */
    public static function album($idAlbum = null, $idUser = null, $title = null)
    {
        $criteria = new Criteria();
        if( null != $idAlbum)
            $criteria->add(Album::ID_ALBUM, $idAlbum, is_array($idAlbum) ? Criteria::IN : Criteria::EQUAL);
        if( null != $idUser)
            $criteria->add(Album::ID_USER, $idUser, is_array($idUser) ? Criteria::IN : Criteria::EQUAL);
        if( null != $title)
            $criteria->add(Album::TITLE, $title, Criteria::LIKE);
        return $criteria;
    } 
	
   /**
    * Build a Criteria from array
    * @param array $fields
    * @return Criteria
    */
    public static function albumFromArray($fields)
    {
        $criteria = self::album($fields['id_album'], $fields['id_user'], $fields['title']);
        return $criteria;
    } 

   /**
    * Build a Criteria
    * @param string $name
    * @param int $number
    * @param string $data
    * @return Criteria
    */
    public static function test($name = null, $number = null, $data = null)
    {
        $criteria = new Criteria();
        if( null != $name)
            $criteria->add(Test::NAME, $name, Criteria::LIKE);
        if( null != $number)
            $criteria->add(Test::NUMBER, $number, is_array($number) ? Criteria::IN : Criteria::EQUAL);
        if( null != $data)
            $criteria->add(Test::DATA, $data, Criteria::LIKE);
        return $criteria;
    } 
	
   /**
    * Build a Criteria from array
    * @param array $fields
    * @return Criteria
    */
    public static function testFromArray($fields)
    {
        $criteria = self::test($fields['name'], $fields['number'], $fields['data']);
        return $criteria;
    } 
}
