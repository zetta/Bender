<?php
/**
 * BenderSettings
 * @author Juan Carlos Jarquin
 */

/**
 * Clase que guardará las settings =) 
 *
 */
class BenderSettings
{
    
    /**
     * Instancia
     * @var BenderSettings
     */
    private static $instance = null;
    
    /**
     * Determina si se utilizarán o no includes en los archivos generados
     * @var boolean
     */
    private $addIncludes = false;
    
    /**
     * Determina si el modelo generado utilizará comportamientos
     * @var boolean
     */
    private $useBehaviors = true;
    
    /**
     * Determina si los catálogos generados serán singleton
     * @var boolean
     */
    private $singleton = true;
    
    /**
     * Determina si el model utilizarán constantes para leer las referencias a si misma,
     * extremadamente util para ser utilizada con el objeto Criteria público
     * @var boolean
     */
    private $useConstants = true;
    
    /**
     * Codificación utilizada en los archivos que se generarán
     * @var string
     */
    private $encoding = 'UTF-8';
    
    /**
     * Determina si los archivos generados llevarán la leyenda que diga que fueron generados con bender
     * @var boolean
     */
    private $addBenderSignature = true;
    
    /**
     * 'firma' que se agregará en los archivos  
     * @var string
     */
    private $benderSignature = " This Model as been proudly generated by Bender (http://code.google.com/p/bender-modeler/)";
    
    /**
     * Nombre del autor de los archivos
     * @var string
     */
    private $author = 'zetta';
    
    /**
     * Pon aqui el nombre de tu empresa, organizacion o cosa =P
     * @var string
     */
    private $brandName = 'ctrl-zetta';
    
    /**
     * un pequeño copyrigt o algo asi =P
     * @var string
     */
    private $copyRight = '(c) zetta';
    
    /**
     * Descripción del sistema que generas, o algo por el estilo
     * @var string
     */
    private $description = '';
    
    /**
     * El PATH base donde estará tu model ( mas que nada sirve para los includes =P ) 
     * @var string
     */
    private $modelLocation = '/';
    
    /**
     * PATH donde estarán los catálogos (includes)
     * @var string
     */
    private $catalogLocation = '';
    
    /**
     * PATH donde estarán los beans (includes)
     * @var string
     */
    private $beanLocation = '';
    
    /**
     * PATH donde estarán las factories (includes)
     * @var string
     */
    private $factoryLocation = '';
    
    /**
     * PATH donde estarán las collections (includes)
     * @var string
     */
    private $collectionLocation = '';
    
    /**
     * Nombre de usuario a utilizar en la conexión a la base de datos mysql
     * @var string
     */
    private $username = 'db_username';
    
    /**
     * Password 
     * @var string
     */
    private $password = 'password';
    
    /**
     * Servidor donde se conectará 
     * @var string
     */
    private $server = 'localhost';
    
    /**
     * Nombre de la base de datos
     * @var string
     */
    private $dbName = 'db_name';
    
    /**
     * PATH donde se guardaran los archivos ( o donde estan los antiguos)
     * @var string
     */
    private $workCopyLocation = 'output/';
    
    /**
     * PATH donde se guardan las librerias
     * @var string
     */
    private $libraryLocation = 'output/Project';
    
    /**
     * Determina si las librerias serán generadas antes de los archivos
     * @var boolean
     */
    private $libFirst = false;
    
    /**
     * @return boolean
     */
    public function getAddBenderSignature()
    {
        return $this->addBenderSignature;
    }
    
    /**
     * @return boolean
     */
    public function getAddIncludes()
    {
        return $this->addIncludes;
    }
    
    /**
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }
    
    /**
     * @return string
     */
    public function getBeanLocation()
    {
        return $this->beanLocation;
    }
    
    /**
     * @return string
     */
    public function getBenderSignature()
    {
        return $this->benderSignature;
    }
    
    /**
     * @return string
     */
    public function getBrandName()
    {
        return $this->brandName;
    }
    
    /**
     * @return string
     */
    public function getCatalogLocation()
    {
        return $this->catalogLocation;
    }
    
    /**
     * @return string
     */
    public function getCollectionLocation()
    {
        return $this->collectionLocation;
    }
    
    /**
     * @return string
     */
    public function getCopyRight()
    {
        return $this->copyRight;
    }
    
    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * @return string
     */
    public function getEncoding()
    {
        return $this->encoding;
    }
    
    /**
     * @return string
     */
    public function getFactoryLocation()
    {
        return $this->factoryLocation;
    }
    
    /**
     * @return string
     */
    public function getModelLocation()
    {
        return $this->modelLocation;
    }
    
    /**
     * @return boolean
     */
    public function getSingleton()
    {
        return $this->singleton;
    }
    
    /**
     * @return boolean
     */
    public function getUseBehaviors()
    {
        return $this->useBehaviors;
    }
    
    /**
     * @return boolean
     */
    public function useConstants()
    {
        return $this->useConstants;
    }
    
    /**
     * @param boolean $addBenderSignature
     */
    public function setAddBenderSignature($addBenderSignature)
    {
        $this->addBenderSignature = $addBenderSignature;
    }
    
    /**
     * @param boolean $addIncludes
     */
    public function setAddIncludes($addIncludes)
    {
        $this->addIncludes = $addIncludes;
    }
    
    /**
     * @param string $author
     */
    public function setAuthor($author)
    {
        $this->author = $author;
    }
    
    /**
     * @param string $beanLocation
     */
    public function setBeanLocation($beanLocation)
    {
        $this->beanLocation = $beanLocation;
    }
    
    /**
     * @param string $benderSignature
     */
    public function setBenderSignature($benderSignature)
    {
        $this->benderSignature = $benderSignature;
    }
    
    /**
     * @param string $brandName
     */
    public function setBrandName($brandName)
    {
        $this->brandName = $brandName;
    }
    
    /**
     * @param string $catalogLocation
     */
    public function setCatalogLocation($catalogLocation)
    {
        $this->catalogLocation = $catalogLocation;
    }
    
    /**
     * @param string $collectionLocation
     */
    public function setCollectionLocation($collectionLocation)
    {
        $this->collectionLocation = $collectionLocation;
    }
    
    /**
     * @param string $copyRight
     */
    public function setCopyRight($copyRight)
    {
        $this->copyRight = $copyRight;
    }
    
    /**
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    
    /**
     * @param string $encoding
     */
    public function setEncoding($encoding)
    {
        $this->encoding = $encoding;
    }
    
    /**
     * @param string $factoryLocation
     */
    public function setFactoryLocation($factoryLocation)
    {
        $this->factoryLocation = $factoryLocation;
    }
    
    /**
     * @param string $modelLocation
     */
    public function setModelLocation($modelLocation)
    {
        $this->modelLocation = $modelLocation;
    }
    
    /**
     * @param boolean $singleton
     */
    public function setSingleton($singleton)
    {
        $this->singleton = $singleton;
    }
    
    /**
     * @param boolean $useBehaviors
     */
    public function setUseBehaviors($useBehaviors)
    {
        $this->useBehaviors = $useBehaviors;
    }
    
    /**
     * @param boolean $useConstants
     */
    public function setUseConstants($useConstants)
    {
        $this->useConstants = $useConstants;
    }
    
    /**
     * @return string
     */
    public function getDbName()
    {
        return $this->dbName;
    }
    
    /**
     * @return boolean
     */
    public function getLibFirst()
    {
        return $this->libFirst;
    }
    
    /**
     * @return string
     */
    public function getLibraryLocation()
    {
        return $this->libraryLocation;
    }
    
    /**
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
    
    /**
     * @return string
     */
    public function getServer()
    {
        return $this->server;
    }
    
    /**
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }
    
    /**
     * @return string
     */
    public function getWorkCopyLocation()
    {
        return $this->workCopyLocation;
    }
    
    /**
     * @param string $dbName
     */
    public function setDbName($dbName)
    {
        $this->dbName = $dbName;
    }
    
    /**
     * @param boolean $libFirst
     */
    public function setLibFirst($libFirst)
    {
        $this->libFirst = $libFirst;
    }
    
    /**
     * @param string $libraryLocation
     */
    public function setLibraryLocation($libraryLocation)
    {
        $this->libraryLocation = $libraryLocation;
    }
    
    /**
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = $password;
    }
    
    /**
     * @param string $server
     */
    public function setServer($server)
    {
        $this->server = $server;
    }
    
    /**
     * @param string $username
     */
    public function setUsername($username)
    {
        $this->username = $username;
    }
    
    /**
     * @param string $workCopyLocation
     */
    public function setWorkCopyLocation($workCopyLocation)
    {
        $this->workCopyLocation = $workCopyLocation;
    }

    
    /**
     * Pues obtiene la instancia unica del singleton
     * @return BenderSettings
     */
    public static function getInstance()
    {
        if (! isset(self::$instance))
        {
            self::$instance = new BenderSettings();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase
     * @return BenderSettings
     */
    private function BenderSettings()
    {
    
    }
    
    /**
     * Guarda las configuraciones
     * @param Array $settings
     */
    private function setup($settings)
    {
    
        
        
        
    }

}

