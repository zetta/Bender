<?php
/**
 * {$brandName}
 *
 * {$description}
 *
 * @category   Project
 * @package    Project_Db
 * @copyright  {$copyright}
 * @authoer    zetta
 * @version    {$version} SVN: $Id$
 */
 
<block:useIncludes>
/**
 * CatalogInterface
 */
require_once '{$libLocation}/{$dbLocation}/CatalogInterface.php';

/**
 * Criteria
 */
require_once '{$libLocation}/{$dbLocation}/Criteria.php';

</block:useIncludes>
/**
 * Clase abstracta que representa un catalogo general
 *
 * @category   Project
 * @package    Project_Db
 * @copyright  {$copyright}
<block:benderSignature>
 * @copyright  {$benderSignature}
 * @author     zetta 
</block:benderSignature>
 * @version    {$version} SVN: $Revision$
 */
abstract class Catalog implements CatalogInterface
{
    const EVENT_CREATE = 1;
    const EVENT_RETRIEVE = 2;
    const EVENT_UPDATE = 3;
    const EVENT_DELETE = 4;

    /**
     * Propiedad que representa el objeto db.
     * @var Zend_Db_Adapter_Abstract Objeto Zend_Db_Adapter_Abstract
     */
    protected $db;
    
    /**
     * Can't Clone Singleton Class 
     */
    private function __clone(){}

    /**
     * Date part usado para los campos tipo Date o DateTime
     * @var string $datePart
     */
    protected $datePart;
  <block:useBehaviors>
    /**
     * Arreglo de observers
     * @var array
     */
    protected $observers;
  </block:useBehaviors>

    /**
     * Constructor de la clase catalogo
     */
    public function Catalog()
    {
        $this->datePart = "YYYY-MM-dd hh:mm:ss";
        $this->db = DBAO::Database();
      <block:privateCriteria>
        $this->criteria = new Criteria();
      </block:privateCriteria>
      <block:useBehaviors>
        $this->observers = array();
      </block:useBehaviors>
    }
    
  <block:useBehaviors>
    /**
     * Agrega un observer al arreglo
     * @param BehaviorObserver $behaviorObserver
     */
    public function addObserver(BehaviorObserver $behaviorObserver)
    {
        $className = get_class($behaviorObserver);
        if (! isset($this->observers[$className]))
            $this->observers[$className] = $behaviorObserver;
    }
    
    /**
     * Envia una notificacion a los observers que estÃ¡n escuchando 
     * @param Object $object 
     * @param int $event 
     */
    public function notifyObservers($object, $event)
    {
        foreach ($this->observers as $observer)
        {
            $observer->fireEvent($this, $object, $event);
        }
    }
  </block:useBehaviors>
  
    protected function notNull($value)
    {
       return !is_null($value);
    }
    
}

