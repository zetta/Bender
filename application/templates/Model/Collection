<?php
/**
 * {$brandName}
 *
 * {$description}
 *
 * @category   Project
 * @package    Project_Models
 * @copyright  {$copyright}
 * @author     {$author}, $LastChangedBy$
 * @version    {$version} SVN: $Id$
 */

/**
 * Clase {$collection} que representa una collecciÃ³n de objetos {$className}
 *
 * @category   Project
 * @package    Project_Models
 * @subpackage Project_Models_Collections
 * @copyright  {$copyright}
<block:benderSignature>
 * @copyright  {$benderSignature}
 * @author     zetta 
</block:benderSignature>
 * @version    {$version} SVN: $Revision$
 */
class {$Collection} extends ArrayIterator
{
	/**
     * Appends the value
     * @param {$className} ${$classVar}
     */
    public function append(${$classVar})
    {
      <block:hasPrimaryField>
        parent::offsetSet(${$classVar}->{$primaryKeyGetter}(), ${$classVar});
        $this->rewind();
      </block:hasPrimaryField>
    }

    /**
     * Return current array entry
     * @return {$className}
     */
    public function current()
    {
        return parent::current();
    }

    /**
     * Return current array entry and 
     * move to next entry
     * @return {$className} 
     */
    public function read()
    {
        ${$classVar} = $this->current();
        $this->next();
        return ${$classVar};
    }

    /**
     * Get the first array entry
     * if exists or null if not 
     * @return {$className}|null 
     */
    public function getOne()
    {
        if ($this->count() > 0)
        {
            $this->seek(0);
            return $this->current();
        } else
            return null;
    }
    
  <block:hasPrimaryField>
    /**
     * Contains one object with ${$primaryKeyPhpName}
     * @param int ${$primaryKeyPhpName}
     * @return boolean
     */
    public function contains(${$primaryKeyPhpName})
    {
        return parent::offsetExists(${$primaryKeyPhpName});
    }
    
    /**
     * Merge two Collections
     * @param int ${$primaryKeyPhpName}
     * @return void
     */
    public function merge({$Collection} ${$collection})
    {
        while(${$collection}->valid())
        {
            ${$bean} = ${$collection}->read();
            if(!$this->contains(${$bean}->{$primaryKeyGetter}()))
            {
                $this->append(${$bean});
            }             
        }
        ${$collection}->rewind();
    }
    
    /**
     * Retrieve the array with primary keys 
     * @return array
     */
    public function getPrimaryKeys()
    {
        return array_keys($this->getArrayCopy());
    }
    
  </block:hasPrimaryField>
}



