<?php
/**
 * {$brandName}
 *
 * {$description}
 *
 * @category   Project
 * @package    Project_Models
 * @copyright  {$copyright}
 * @author     {$author}, $LastChangedBy$
 * @version    {$version} SVN: $Id$
 */
<block:useIncludes>

/**
 * Dependencias
 */
require_once '{$libLocation}/{$dbLocation}/Catalog.php';
require_once '{$libLocation}/{$exceptionFolder}/{$className}Exception.php';
require_once '{$modelFolder}/{$factoryFolder}/{$className}Factory.php';
require_once '{$modelFolder}/{$collectionFolder}/{$className}Collection.php';
</block:useIncludes>
<block:extendedInclude>
require_once '{$modelFolder}/{$catalogFolder}/{$extendedClass}Catalog.php';
</block:extendedInclude>

/**
 * Clase {$Catalog}
 *
 * @category   Project
 * @package    Project_Db
 * @copyright  {$copyright}
<block:benderSignature>
 * @copyright  {$benderSignature}
 * @author     zetta 
</block:benderSignature>
 * @version    {$version} SVN: $Revision$
 */
class {$Catalog} extends {$extendedCatalog}
{
  <block:isSingleton>
    /**
     * Instancia singleton
     * @var {$Catalog}
     */
    static protected $instance   = null;
    
    /**
     * Método para obtener la instancia del catálogo
     * @return {$Catalog}
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Can't Clone Singleton Class 
     */
    private function __clone(){}
    

    /**
     * Constructor de la clase {$Catalog}
     * @return {$Catalog}
     */
    private function {$Catalog}()
    {
        parent::Catalog();{$behaviors}
    }    
  </block:isSingleton>
  <block:isntSingleton>
    /**
     * Constructor de la clase {$Catalog}
     * @return {$Catalog}
     */
    public function {$Catalog}()
    {{$behaviors}
        parent::Catalog();
    }  
  </block:isntSingleton>

    /**
     * Metodo para agregar un {$Bean} a la base de datos
     * @param {$Bean} ${$bean} Objeto {$Bean}
     */
    public function create(${$bean})
    {
        if(!(${$bean} instanceof {$Bean}))
            throw new {$Exception}("El parámetro [\${$bean}] no es una instancia de {$Bean}");
      <block:useBehaviors>
        $this->notifyObservers(${$bean},Catalog::EVENT_CREATE);
      </block:useBehaviors>
        try
        {
          <block:willExtend>
            parent::create(${$bean});
          </block:willExtend>
            $data = array(
              <block:getters>
                '{$getters.name}'{$getters.spaces}=> ${$bean}->{$getters.getter},
              </block:getters>
            );
            $this->db->insert({$Bean}::TABLENAME, $data);
          <block:hasPrimaryField>
            ${$bean}->{$primaryKeySetter}($this->db->lastInsertId());
          </block:hasPrimaryField>
        }
        catch(Exception $e)
        {
            throw new {$Exception}("El objeto {$Bean} no pudo ser guardado en la base de datos\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int ${$primaryKeyPhpName}
     * @return {$Bean}|null Objeto {$Bean} si existe, caso contrario retorna null;
     */
    public function getById(${$primaryKeyPhpName})
    {
        try
        {
          <block:privateCriteria>
            {$criteriaVar}->add({$primaryKeyAccesor}, ${$primaryKeyPhpName}, Criteria::EQUAL);
            $new{$Bean} = $this->getByCriteria()->getOne();
          </block:privateCriteria>
          <block:publicCriteria>
            {$criteriaVar} = new Criteria();
            {$criteriaVar}->add({$primaryKeyAccesor}, ${$primaryKeyPhpName}, Criteria::EQUAL);
            $new{$Bean} = $this->getByCriteria({$criteriaVar})->getOne();
          </block:publicCriteria>
        }
        catch(Exception $e)
        {
            throw new {$Exception}("El objeto {$Bean} no pudo ser obtenido\n" . $e->getMessage());
        }
        return $new{$className};
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return {$Collection}
     */
    public function getByIds($ids)
    {
        try
        {
          <block:privateCriteria>
            {$criteriaVar}->add({$primaryKeyAccesor}, $ids, Criteria::IN);
            ${$collection} = $this->getByCriteria();
          </block:privateCriteria>
          <block:publicCriteria>
            {$criteriaVar} = new Criteria();
            {$criteriaVar}->add({$primaryKeyAccesor}, $ids, Criteria::IN);
            ${$collection} = $this->getByCriteria({$criteriaVar});
          </block:publicCriteria>
        }
        catch(Exception $e)
        {
            throw new {$Exception}("El objeto {$Collection} no pudo ser obtenido\n" . $e->getMessage());
        }
        return ${$collection};
    }

    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        try
        {
            $result = $this->db->fetchCol('SELECT {$primaryKeyName} FROM '.{$Bean}::TABLENAME);
        }
        catch(Exception $e)
        {
            throw new {$Exception}("No se pudieron obtener los ids\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo para actualizar un {$className}
     * @param {$Bean} ${$bean} Objeto {$Bean}
     */
    public function update(${$bean})
    {
        if(!(${$bean} instanceof {$Bean}))
            throw new {$Exception}("El parámetro [\${$bean}] no es una instancia de {$Bean}");
        try
        {
            $where[] = "{$primaryKeyName} = '{${$bean}->{$primaryKeyGetter}()}'";
            $data = array(
              <block:getters>
                '{$getters.name}'{$getters.spaces}=> ${$bean}->{$getters.getter},
              </block:getters>
            );
            $this->db->update({$Bean}::TABLENAME, $data, $where);
          <block:willExtend>
            parent::update(${$bean});
          </block:willExtend>
        }
        catch(Exception $e)
        {
            throw new {$Exception}("El objeto {$Bean} no pudo ser actualizado\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para eliminar un {$bean}
     * @param {$Bean} ${$bean} Objeto {$Bean}
     */
    public function delete(${$bean})
    {
        if(!(${$bean} instanceof {$Bean}))
            throw new {$Exception}("El parámetro [\${$bean}] no es una instancia de {$Bean}");
        $this->deleteById(${$bean}->{$primaryKeyGetter}());
    }

    /**
     * Metodo para eliminar un {$className} a partir de su Id
     * @param int ${$primaryKeyPhpName}
     */
    public function deleteById(${$primaryKeyPhpName})
    {
        try
        {
            $where = array($this->db->quoteInto('{$primaryKeyName} = ?', ${$primaryKeyPhpName}));
            $this->db->delete({$Bean}::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new {$Exception}("El objeto {$Bean} no pudo ser eliminado\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios {$Bean} a partir de su Id
     * @param array $ids
     */
    public function deleteByIds($ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add('{$primaryKeyName}',$ids,Criteria::IN);
            $this->db->delete({$Bean}::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new {$Exception}("El objeto {$Bean} no pudo ser eliminado\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para obtener todos los id de {$Bean} por criterio
  <block:privateCriteria>
     * @return array Array con todos los id de {$Bean} que encajen en la busqueda
     */
    private function getIdsByCriteria()
  </block:privateCriteria>
  <block:publicCriteria>
     * @param Criteria $criteria
     * @return array Array con todos los id de {$Bean} que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria)
  </block:publicCriteria>
    {
        try
        {
            $sql = "SELECT {$primaryKeyName}
                    FROM ".{$Bean}::TABLENAME."
                    WHERE  " . {$criteriaVar}->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Exception $e)
        {
            throw new {$Exception}("No se pudieron obtener los ids de objetos {$Bean}\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo para obtener un campo en particular de un {$Bean} dado un criterio
  <block:privateCriteria>
     * @param string $field
     * @return array Array con el campo de los objetos {$Bean} que encajen en la busqueda
     */
    private function getCustomFieldByCriteria($field)
  </block:privateCriteria>
  <block:publicCriteria>
     * @param Criteria $criteria
     * @param string $field
     * @return array Array con el campo de los objetos {$Bean} que encajen en la busqueda
     */
    public function getCustomFieldByCriteria(Criteria $criteria, $field)
  </block:publicCriteria>
    {
        try
        {
            $sql = "SELECT {$field{$field}}
                    FROM ".{$Bean}::TABLENAME."
                    WHERE  " . {$criteriaVar}->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Exception $e)
        {
            throw new {$Exception}("No se pudieron obtener los ids de objetos {$Bean}\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos {$className} 
     * dependiendo del criterio establecido
  <block:privateCriteria>
     * @return {$Collection} ${$collection}
     */
    private function getByCriteria()
  </block:privateCriteria>
  <block:publicCriteria>
     * @param Criteria $criteria
     * @return {$Collection} ${$collection}
     */
    public function getByCriteria(Criteria $criteria)
  </block:publicCriteria> 
    {
        try 
        {
            $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
            $sql = "SELECT * FROM ".{$Bean}::TABLENAME."
                  <block:willExtend>
                    INNER JOIN ".{$extendedClass}::TABLENAME." USING ( {$pkSimpleName} )
                  </block:willExtend>
                    WHERE " . {$criteriaVar}->createSql();
            ${$collection} = new {$Collection}();
            foreach ($this->db->fetchAll($sql) as $result){
                ${$Collection}->append($this->createInternal($result));
            }
        }
        catch(Exception $e)
        {
            throw new {$Exception}("No se pudo obtener la colección de items\n" . $e->getMessage());
        }
      <block:privateCriteria>
        $this->criteria->clear();
      </block:privateCriteria>
        return ${$collection};
    }

    /**
     * Método que manda a llamar a {$className}Factory para instanciar el objeto
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @uses {$Factory}::create{$Bean}Internal
     * @return {$Bean} 
     */
    private function createInternal($result)
    {
        return {$Factory}::create{$Bean}Internal({$results});
    }
  <block:foreignKeys>
  
    /**
     * Obtiene un {$Collection} dependiendo del {$foreignKeys.fkName}
     * @param {$foreignKeys.fkType} ${$foreignKeys.fkName} {$foreignKeys.fkComment} 
     * @return {$foreignKeys.return}
     */
    public function getBy{$foreignKeys.fkMethodName}(${$foreignKeys.fkName})
    {
        try
        {
          <block:privateCriteria>
            {$criteriaVar}->add({$foreignKeys.fkConstant},${$foreignKeys.fkName},Criteria::EQUAL);
            ${$collection} = $this->getByCriteria();
          </block:privateCriteria>
          <block:publicCriteria>
            {$criteriaVar} = new Criteria();
            {$criteriaVar}->add({$foreignKeys.fkConstant},${$foreignKeys.fkName},Criteria::EQUAL);
            ${$collection} = $this->getByCriteria({$criteriaVar});
          </block:publicCriteria>
        }
        catch(Exception $e)
        {
            throw new {$Exception}("El objeto {$foreignKeys.return} no pudo ser obtenido\n" . $e->getMessage());
        }
        return ${$collection}{$foreignKeys.getOne};
    }
  </block:foreignKeys>

} 
 
 
